class SpaceInvaders {

  // Players vehicle
field Vehicle character;
	
  // Characters orientation
field int orientation; // 0=none,1=up,2=down,3=left,4=right

  // Characters weapon on/off
field int firedShot;

	field Array invaders;
	field int numInvaders; //# of opponents
	field int invadersDead; //# of oponents dead
	field int time; //time played
	field int level; //level #
	field int score; //total score
	field int lives; //user lives
	field int invaderSize; //motion paralax
	field InvaderShot enRoute; //is the shot coming?
	field int numEnV; //# of shots en route
	field int isEnRoute; //checks to see if shots are flying
	field int vehicleS; // vehicle size
	field int vehicleX, vehicleY; //vehicle location on screen
	field int damage; // 0 = not hit, 1 = hit
	field int invaderToShoot; //# of opponents left
	
	
  /** Constructs a new game. */
  constructor SpaceInvaders new() {
    let character = Vehicle.new();
    let orientation = 0;
    let firedShot = 0;
		let numInvaders = 10;		
		let invadersDead = 0;		
		let invaders = Array.new(numInvaders);		
		let score = 0;
		let time = 0;
		let level = 0;
		let numEnV = 0;
		let isEnRoute = 0;
		let invaderSize = 10;
		let vehicleS = 10;
		let vehicleX = 50;
		let vehicleY = 10;
		let invaderToShoot = 0;
		do makeInvaders(); //generate opponents
		let lives = 3;
        return this;
  }
	
//make opponents
method void makeInvaders() {
	var int x, y, v;
	var Invader i;
	let x = 25;
	let y = 50;
	let v = 0;
		
		//generates array of invaders
	while (v < numInvaders) {
		let i = Invader.new(x, y, invaderSize);
		let invaders[v] = i;
		let x = x + 20;
		let v = v+1;
	}
		return;
	}
//check if opponent is hit
method int hitInvader(Shot s) {
	var int v, r, foobar;
	var Invader iv; //object of invader class
	let v = 0;
	while (v < numInvaders) {
		let iv = invaders[v]; //set invaders object representative of array vector
		let r = shotHitInvader(iv, s); //function call
		if (r = 1) {		
			do iv.disposeMem(); //allocates memory
			let invadersDead = invadersDead + 1; //increment dead opponent tally
			let score = score + 1; //increment score
			do Output.moveCursor(0,0);
			do Output.printString("SCORE: ");
			do Output.printInt(score);
			do Output.printString("      LEVEL: ");
			do Output.printInt(level);
			do Output.printString("      LIVES: ");
			do Output.printInt(lives);
			if (invadersDead = numInvaders) {
				let level = level + 1;
				do Memory.deAlloc(invaders); //deallocates memory
				let invaders = Array.new(numInvaders); //refreshes invaders for a new level
				do makeInvaders(); //create new invader
				let invadersDead = 0;
			}
				return 1; //hit invader
			}
			let v = v+1;
		}
	return 0; //missed invader
}
	//method to find shot damage to invader
method int shotHitInvader (Invader iv, Shot s) {
	var int ivy, ivx; //x and y axis object relating to invadershot class
	var int sy, sx; //x and y axis object relating to shot class
	let sy = s.getY(); //call y component of shot
	let ivy = iv.getY(); //ca;; y component of invader shot
	let sx = s.getX(); //call x component of shot
	let ivx = iv.getX(); //call y component of invader shot
	
	//logic loop to determine if the shot impacted the invader
	if ( (~(sy < ivy)) & (~(sy > (ivy+invaderSize))) ) {
		if ((~(sx < ivx)) & (~(sx > (ivx+invaderSize)))) {
			return 1; //returns damage
		}
	}			
	return 0; //no damage done
	}

}
