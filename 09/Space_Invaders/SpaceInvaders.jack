class SpaceInvaders {

  // Players vehicle
field Vehicle character;
	
  // Characters orientation
field int orientation; // 0=none,1=up,2=down,3=left,4=right

  // Characters weapon on/off
field int firedShot;

	field Array invaders;
	field int numInvaders; //# of opponents
	field int invadersDead; //# of oponents dead
	field int time; //time played
	field int level; //level #
	field int score; //total score
	field int lives; //user lives
	field int invaderSize; //motion paralax
	field InvaderShot enRoute; //is the shot coming?
	field int numEnV; //# of shots en route
	field int isEnRoute; //checks to see if shots are flying
	field int vehicleS; // vehicle size
	field int vehicleX, vehicleY; //vehicle location on screen
	field int damage; // 0 = not hit, 1 = hit
	field int invaderToShoot; //# of opponents left
	
	
  /** Constructs a new game. */
  //initialize variables
  constructor SpaceInvaders new() {
    let character = Vehicle.new();
    let orientation = 0;
    let firedShot = 0;
		let numInvaders = 10;		
		let invadersDead = 0;		
		let invaders = Array.new(numInvaders);		
		let score = 0;
		let time = 0;
		let level = 0;
		let numEnV = 0;
		let isEnRoute = 0;
		let invaderSize = 10;
		let vehicleS = 10;
		let vehicleX = 50;
		let vehicleY = 10;
		let invaderToShoot = 0;
		do makeInvaders(); //generate opponents
		let lives = 3;
        return this;
  }
	
//make opponents
method void makeInvaders() {
	var int x, y, v;
	var Invader i;
	let x = 25;
	let y = 50;
	let v = 0;
		
		//generates array of invaders
	while (v < numInvaders) {
		let i = Invader.new(x, y, invaderSize);
		let invaders[v] = i;
		let x = x + 20;
		let v = v+1;
	}
		return;
	}
//check if opponent is hit
method int hitInvader(Shot s) {
	var int v, r, foobar;
	var Invader iv; //object of invader class
	let v = 0;
	while (v < numInvaders) {
		let iv = invaders[v]; //set invaders object representative of array vector
		let r = shotHitInvader(iv, s); //function call
		if (r = 1) {		
			do iv.disposeMem(); //allocates memory
			let invadersDead = invadersDead + 1; //increment dead opponent tally
			let score = score + 1; //increment score
			do Output.moveCursor(0,0);
			do Output.printString("SCORE: ");
			do Output.printInt(score);
			do Output.printString("      LEVEL: ");
			do Output.printInt(level);
			do Output.printString("      LIVES: ");
			do Output.printInt(lives);
			if (invadersDead = numInvaders) {
				let level = level + 1;
				do Memory.deAlloc(invaders); //deallocates memory
				let invaders = Array.new(numInvaders); //refreshes invaders for a new level
				do makeInvaders(); //create new invader
				let invadersDead = 0;
			}
				return 1; //hit invader
			}
			let v = v+1;
		}
	return 0; //missed invader
}
	//method to find shot damage to invader
method int shotHitInvader (Invader iv, Shot s) {
	var int ivy, ivx; //x and y axis object relating to invadershot class
	var int sy, sx; //x and y axis object relating to shot class
	let sy = s.getY(); //call y component of shot
	let ivy = iv.getY(); //ca;; y component of invader shot
	let sx = s.getX(); //call x component of shot
	let ivx = iv.getX(); //call y component of invader shot
	
	//logic loop to determine if the shot impacted the invader
	if ( (~(sy < ivy)) & (~(sy > (ivy+invaderSize))) ) {
		if ((~(sx < ivx)) & (~(sx > (ivx+invaderSize)))) {
			return 1; //returns damage
		}
	}			
	return 0; //no damage done
}

	//method to move invaders on screen
method void moveInvaders() {
	var int v; //character placement
	var Invader ivR, ivL, temp_iv, iv;
	var int ivrx; //Right x axis componenent object of Invader class
	var int ivlx; //Left x axis componenent object of Invader class
	var int ivy; //Y axis componenet object of Invader class
	var int dir; //orientation
	var int dead, found; //current and dead invaders
	var int atLeft, atRight, atBottom; //border collision check
	
	// get first alive enemy on the left
	let v = 0; let found = 0;
	while ((v < numInvaders) & ~found) {
		let temp_iv = invaders[v]; //temporary storage for array variable
		let dead = temp_iv.getIsDead(); 
		if (dead = 0) {
			let ivL = temp_iv; //create temporary counter for left side
			let found = 1;
		}
		let v = v + 1;
	}
		
	// get the first alive enemy on the right of line
	let v = 9; let found = 0;
	while ((v > -1) & ~found) {
		let temp_iv = invaders[v]; //temporary storage for array variable
		let dead = temp_iv.getIsDead();
		if (dead = 0) {
			let ivR = temp_iv; //create temporary counter for right side
			let found = 1;
		}
		let v = v - 1;
	}
	
	let ivrx = ivR.getX(); //store value in right getX function
	let ivlx = ivL.getX(); //store value in left getX function
	let ivy = ivL.getY(); //store value in getY function
	let dir = ivL.getOrientation(); //store value in orientation function
	
	let atLeft = 0; let atRight = 0; let atBottom = 1; 
	if (ivlx < 20) {
		let atLeft = 1;
	}
	if (ivrx > 490) {
		let atRight = 1;
	}
	if (ivy > 200) {
		let atBottom = 1;
	}
	
	// going right
	if (dir = 1) { 
		if (atRight = 0) {
			// continue moving right
			let v = 0;
			while (v < numInvaders) {
				let iv = invaders[v];
				do iv.flipX(); //goes other direction
				let v = v + 1;
			}
		}
		else {
			//at right border
			if (atBottom = 1) { 
				// move left
				let v = 0;
				while (v < numInvaders) {
					let iv = invaders[v];
					do iv.flipX(); //goes other direction
					do iv.changeOrientation(); //function call to switch orientation
					let v = v + 1;
				}
			}
		}
	}
	
	// going left
	if (dir = 2) { 
		if (atLeft = 0) {
			// continue moving left
			let v = 0;
			while (v < numInvaders) {
				let iv = invaders[v];
				do iv.flipX(); //goes other direction
				let v = v + 1;
			}
		}
		else {
			if (atBottom = 1) {
				// move right
				let v = 0;
				while (v < numInvaders) {
					let iv = invaders[v];
					do iv.flipX(); //goes other direction 
					do iv.changeOrientation(); //function call to switch orientation
					let v = v  + 1;
				}
			}
		}
	}
	do Sys.wait(7); //delay
	return;
	}

   /** Deallocates the object's memory. */
  method void disposeMem() {
      do character.disposeMem(); //clear vehicle position
      do Memory.deAlloc(this);
      return;
  }
  		//Time bonus
	method int mod(int t, int a) {
		var int temp;
		let temp = t;
		if (t > 300) {
		  let time = 0;
		}
		if (t < a) {
			return t;
		}
		while (temp > (a-1)) {
			let temp = temp - a;
		}
		return temp;
	}


    /** Starts the game. Handles inputs from the user that control
     *  the square's movement, direction and size. */
    method void run() {
        var char key;
			var int dead;
        var boolean exit;
        var Shot s; //s object for class Shot
			var Shot sTemp; //temporary object for class Shot
			var int didHit1, didHit2; //two variables to check hit box
			var int timeMod; 
			let didHit1 = 0;
			let didHit2 = 0;
        let exit = false;

        //print statements
		do Output.moveCursor(0,0);
		do Output.printString("SCORE: ");
		do Output.printInt(score);
		do Output.printString("      LEVEL: ");
		do Output.printInt(level);
		do Output.printString("      LIVES: ");
		do Output.printInt(lives);

        while (~exit) {
			let time = time + 1;
            // waits for a key to be pressed.
            while (key = 0) {
                if (time = 299) {
					do chooseInvader(); //checks if opponents are hit
				}
				do moveProjectile();
				
				let time = time + 1;	
				let key = Keyboard.keyPressed(); //calls keyboardpressed function
                do moveCharacter(); //moves the player
				let timeMod = mod(time, 60);
				if (timeMod = 0) {
					do moveInvaders(); //delay on movement for enemies
				}
				 if (firedShot = 1) {
                    let s = Characters.getShot(); //shot where the player is currently at
                    do s.shoot(); //shoot function call
					do trackShot(s); //observes shot movement
					let didHit1 = hitInvader(s); //logic check
					if (didHit1 = 1) {
						do b.disposeMem(); //refresh shot
						let firedShot = 0;
					}
                }
				if (lives = 0) {
					let key = 1;
				}
            }
			if (key = 1) {
					do Screen.clearScreen(); //reset screen
					do Output.moveCursor(0, 0); //print lines
					do Output.printString("You lose! Do you wish to restart?");
					do Output.moveCursor(10, 0);
					do Output.printString("You killed ");
					do Output.printInt(score);
					do Output.printString(" invaders");
					do Output.moveCursor(20, 0);
					do Output.printString("Left for yes / Right for no");
					let key = Keyboard.keyPressed();
					while(key= 0) {
						let key = Keyboard.keyPressed();
					}
				
				//ask if want to restart.
				
				if (key = 130) {
					do Screen.clearScreen();
					do makeInvaders(); //reset invaders
					let exit = false;
					let lives = 3; //reset lives
					let score = 0; //reset score
					let level = 0; //reset level
					do Output.moveCursor(0,0); //print lines
					do Output.printString("SCORE: ");
					do Output.printInt(score);
					do Output.printString("      LEVEL: ");
					do Output.printInt(level);
					do Output.printString("      LIVES: ");
					do Output.printInt(lives);
				}
				else {
					let exit = true;
					let key = 81;
					
				}
			}
			
            if (key = 81) {
                let exit = true;
            }
            if (key = 130) {
				let time = time + 1;	
				if (time = 299) {
					do chooseInvader(); //checks to see if invader is hit
				}
				do moveProjectile(); //moves the shot forward
			    let orientation = 3; //move left
            }
            if (key = 132) {
				let time = time + 1;	
                if (time = 299) {
					do chooseInvader(); 
				}
				do moveProjectile();
				let orientation = 4; //move right
            }
            //space bar = 32
            if (key = 32) { 
				let time = time + 1;	
				if (time = 299) {
					do chooseInvader();
				}
				do moveProjectile();
				if (firedShot = 0) {
					let time = time + 1;	
					do character.shootShot(); //invokes shoot function on spacebar press
					let firedShot = 1; //shots fired
				}
			}
	
            // waits for the key to be released.
            while (~(key = 0)) {
				if (time = 299) {
					do chooseInvader();
				}
				do moveProjectile();
				let time = time + 1;	
			    let key = Keyboard.keyPressed();
                do moveCharacter(); 
				let timeMod = mod(time, 15);				
				if (timeMod = 0) {
					do moveInvaders(); //timer for invader movement
				}
				let key = 0;
                let orientation = 0;
                if (firedShot = 1) {
                    let s = character.getShot(); //shoot from this spot of the player
                    do s.shoot(); //shoots the shot
					do trackShot(s); //tracks shot movement 
					let didHit2 = hitInvader(s); //logic loop
					if (didHit2 = 1) {
						do b.disposeMem();
						let firedShot = 0;
					}
					
                }
				
            }
		
        }
            
        return;
    }

    /** Moves the vehicle by 2 pixels in the current direction. */
    method void moveCharacter() {
        if (orientation = 3) {
            do character.moveLeft();
        }
        if (orientation = 4) {
            do character.moveRight();
        }
       
        return;
    }
	
	//follows the shot to check hits on invaders
	method void trackShot(Shot s) {
		if (s.getY() < 11) {
			let firedShot = 0;
			do s.disposeMem();
		}
		return;
	}
	
	//creates the projectile to be shot
	method void createProjectile(Invader iv) {
		var int ivx;
		let ivx = iv.getX();
		let enRoute = InavderShot.new(ivx);
		let isEnRoute = 1; //sets boolean value for projectile to on
		return;
	}
	
	/** Gets starting x value of shot */
	method void chooseInvader() {
		// loop through enemies, choose one that isn't dead
		var int v;
		var Invader iv;
		var int ivx, dead;
		if (isEnRoute = 0) {
			let v = 0;
			while (v < numInvaders) {
				let iv = invaders[v];
				let dead = iv.getIsDead();
				if (dead = 0) { 
					do createProjectile(iv);
				}
				let v = v + 1;
			}
		}
		
		return;
	}
	
	method void moveProjectile() {
		var int my;
		var int key;
		if (isEnRoute = 1) {
			do enRoute.shoot();
			let damage = projectileHitVehicle();
			if (damage = 1) {
			}
			
			let my = enRoute.getY();
			if (my > 249) {
				do destroyProjectile();
			}			
		}
		do Sys.wait(5);
		return;
	}

	
	method int died() {
		if (lives = 0) {
			return 1;
		}
		else {
			return 0;
		}
	}
	
	/** Undraws and deallocates shot */
	method void destroyProjectile() {
		if (isEnRoute = 1) {
			do enRoute.disposeMem();
			let isEnRoute = 0;
		}
		return;
	}
	
	method int projectileHitVehicle() {
		// compares vehicle's x&y to projectile's x&y
		
		var int vy, vx; //vehicle x & y axis
		var int sy, sx; //shot x & y axis
		var int ss; //shot size
		var int vSize; //vehicle size
		let sy = enRoute.getY(); 
		let vy = character.getY();
		let sx = enRoute.getX();
		let vx = character.getX();
		let ss = 4;
		
		
		
		if (isEnRoute = 1) {

			//setting boundary parameters for cases of contact 
			if (((sx > vx) & (sy > vy) & (sx < (vx + vehicleX)) & (sy < (vy + vehicleY)))				|
				(((sx + ss) > vx) & (sy > vy) & ((sx + ss) < (vx + vehicleX)) & (sy < (vy + vehicleY))) |
				((sx > vx) & ((sy + ss) > vy) & (sx < (vx + vehicleX)) & ((sy + ss) < (vy + vehicleY)))	|
				(((sx+ss) > vx) & ((sy + ss) > vy) & ((sx + ss) < (vx + vehicleX)) & ((sy + ss) < (vy + vehicleY)))) {
				
				do destroyProjectile(); //deletes the shot from screen
				let lives = lives -1; //live deduction
				do Output.moveCursor(0,0); //print statements
				do Output.printString("SCORE: ");
				do Output.printInt(score);
				do Output.printString("      LEVEL: ");
				do Output.printInt(level);
				do Output.printString("      LIVES: ");
				do Output.printInt(lives);
				return 1;
			}
		}

		return 0;
	}
}